# 7장

### 정리
좋은 아키텍처를 위해서는 좋은 아키텍처를 정의하는 원칙이 필요한데 그것이 SOLID
SOLID 원칙의 목적
	- 변경에 유연하다
	- 이해하기 쉽다.
	- 많은 소프트웨어 시스템에 사용될 수 있는 컴포넌트의 기반이 된다.

SRP : 단일 책임 원칙
	- 함수는 단 하나의 일만 해야 한다.
SRP 원칙을 위반하는 징후
1. 우발적 중복
2. 병합
해결책 : 데이터와 메서드를 분리 (Facade 패턴)

OCP : 개방 폐쇄 원칙
	- 소프트웨어 개체는 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 한다.
방향성 제어
정보 은닉

LSP : 리스코프 치환 원칙
정사각형/직사각형 문제

ISP : 인터페이스 분리 원칙
	- 다수의 사용자가 한 클래스를 사용할 때 클래스를 인터페이스 단위로 분리하여 해결

DIP : 의존성 역전 원칙
	- 소스코드 의존성이 추상에 의존하며 구체에는 의존하지 않는 시스템(유연성이 극대화된 시스템)
안정된 추상화 : 변동성이 큰 구현체에 의존하는 일은 지양하고 안정된 추상 인터페이스를 선호하는 아키텍처
	- 변동성이 큰 구체 클래스를 참조하지 말라
	- 변동성이 큰 구체 클래스로부터 파생하지 말라
	- 구체 함수를 오버라이드 하지 말라
	- 구체적이며 변동성이 크다면 언급하지 말라


결론
SRP(단일 책임 원칙)는 메서드와 클래스 수준의 원칙이다.
OCP(개방 폐쇄 원칙)는 시스템의 아키텍처를 떠받치는 원동력 중 하나다.
LSP(리스코프 치환 원칙)는 아키텍처 수준까지 확장할 수 있고, 반드시 확장해야만 한다.
ISP(인터페이스 분리 원칙)는 불필요한 짐을 실은 무언가에 의존하면 예상치도 못한 문제에 빠진다는 사실을 알려준다.
DIP(의존성 역전 원칙)는 아키텍처 다이어그램에서 가장 눈에 드러나는 원칙이 될 것이다.


----------------------------------------------------------------


### 느낀점

